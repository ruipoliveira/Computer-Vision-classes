#include "fileSource.h"
#include <iostream>
#include <vector>
#include <stdio.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include "opencv2/video/tracking.hpp"

#include <string>
#include <unistd.h>

#define SMIN 30
#define VMIN 10
#define VMAX 256

using namespace std;
using namespace cv;


Point2f point;
bool addRemovePt = false;

Mat roiFrame, roiAux;
Rect roiBox;
vector<Point> roiPts;		//points defining a ROI
int cnt = 0;				//mouse clicks counter

//EX2
bool type;
int method;
int threshValue;
string filename = "vid/vid1.mp4";
Mat frame;



static void roiSelection(int event, int x, int y, int, void*) {
	// This function waits for user to select points that define a ROI
	switch (event) {
		case CV_EVENT_LBUTTONDOWN:
			cnt++;

			//point selection and ROI definition
			if (cnt <= 2) {
				//point selection and display
				Point selected = Point(x, y);
				roiPts.push_back(selected);

				circle(roiFrame, selected, 5, Scalar(0, 0, 255), 1);
				if (cnt == 2) {
					//ROI display and storage
					rectangle(roiFrame, roiPts[0], roiPts[1], Scalar(255, 0, 0), 2);
					roiBox = Rect(roiPts[0], roiPts[1]);
				}
			}
			else {
				//flushes point vector
				roiFrame = roiAux.clone();
				roiPts.clear();
				cnt = 0;
			}

			imshow("Object Tracking", roiFrame);
	}
}


int ex1(){

//	bool sel;
//
//	Mat frame, hsv, roi, mask, roiMask, roiHist, backProj;
//
//	//video file
//	const char* video = "vid/vid1.mp4";
//
//	//histogram configurations
//	int channels[] = {0, 1};
//	int hbins = 30;
//	int sbins = 32;
//	int histSize[] = {hbins, sbins};
//	float hrange[] = {0, 180};
//	float srange[] = {0, 256};
//	const float* histRange[] = {hrange, srange};
//
//	//presents user interface
//	system("clear");		//clears terminal window
//	cout
//	<< endl
//	<< " -----------------" << endl
//	<< "  Object Tracking " << endl
//	<< " -----------------" << endl
//	<< endl
//	<< " Choose to track object in video feed [0] or video file [1]: ";
//	cin >> sel;
//	cout << endl;
//
//	//initializes video capture
//	VideoCapture cap;
//	if (sel) cap.open(video);
//	else cap.open(0);
//
//	if (!cap.isOpened()) return -1;
//
//	//defines termination criteria for cam shift
//	TermCriteria termCrit = TermCriteria(CV_TERMCRIT_EPS | CV_TERMCRIT_ITER, 10, 1);
//
//	//performs tracking
//	for (;;) {
//		cap >> frame;		//gets new frame
//
//		//ends tracking if video ends
//		if (frame.rows == 0 || frame.cols == 0) break;
//
//		//converts frame to HSV colorspace
//		cvtColor(frame, hsv, COLOR_BGR2HSV);
//
//		//gets mask (easier and more accurate detection)
//		inRange(hsv, Scalar(0, SMIN, MIN(VMIN, VMAX)),
//           	Scalar(180, 256, MAX(VMIN, VMAX)), mask);
//
//        //displays point selection (cnt == 0 by default)
//		if (cnt == 0) {
//			cout
//			<< " Select two points to define ROI with the mouse. A third mouse click will reset the selection." << endl
//			<< " Press ENTER when the selection is made." << endl << endl;
//
//			//images for selection
//			roiFrame = frame.clone();
//			roiAux = roiFrame.clone();
//
//			//mouse callback for selecting ROI
//			imshow("Object Tracking", roiFrame);
//			setMouseCallback("Object Tracking", roiSelection);
//			waitKey(0);
//
//			//is points have been selected and ROI defined
//			if (roiPts.size() == 2) {
//				//creates ROI and ROI mask
//				roi = hsv(roiBox);
//				roiMask = mask(roiBox);
//
//				//creates ROI histogram
//				//(using both hue and sat (2 channels) gives better results)
//				calcHist(&roi, 1, channels, roiMask, roiHist, 2, histSize, histRange);
//				normalize(roiHist, roiHist, 0, 255, NORM_MINMAX);
//			}
//			else {
//				cout << " Error: not enough points selected to form ROI." << endl;
//				return -1;
//			}
//		}
//
//		//calculates histogram back projection
//		calcBackProject(&hsv, 1, channels, roiHist, backProj, histRange);
//
//		//backProj takes into account mask (better results)
//		backProj &= mask;
//
//		//calculates cam shift to track object inside ROI
//		RotatedRect trackBox = CamShift(backProj, roiBox, termCrit);
//
//		//draws ellipse around tracked object
//		ellipse(frame, trackBox, Scalar(255, 0, 0), 2);
//
//		imshow("Object Tracking", frame);
//
//		if (waitKey(24) >= 0) break;
//	}
//	return 0;
}



int ex2(){
//Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
//	Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
//	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
//
//	//opens default camera
//	VideoCapture cap(0);
//  VideoCapture capture(filename);
//
//	//check if success
//	if (!cap.isOpened())
//		{
//			cout << "Error when reading camera!" << endl;
//			return -1;
//		}
//  if(!capture.isOpened())
//	{
//		cout << "Error when reading video file!" << endl;
//		return -1;
//	}
//
//	//presents options to user
//	system("clear");		//clears terminal window
//	cout << endl << "---------------" << endl;
//	cout << " Choose Video Capture[0] or load a Video File[1]" << endl;
//	cout << "---------------" << endl << endl;
//	cin >> type;
//
//  if(type)
//  {
//    namedWindow( "Video File", 1);
//    for( ; ; )
//    {
//      capture >> frame;
//      if(frame.empty())
//        break;
//      imshow("Video File", frame);
//
//			//update the background model
//			pMOG2->apply(frame, fgMaskMOG2);
//			//get the frame number and write it on the current frame
//			stringstream ss;
//			rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
//			          cv::Scalar(255,255,255), -1);
//			ss << capture.get(CAP_PROP_POS_FRAMES);
//			string frameNumberString = ss.str();
//			putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
//			        FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
//			//show the current frame and the fg masks
//			imshow("Video File Subtracted", fgMaskMOG2);
//
//      waitKey(20);
//    }
//    waitKey(0);
//  }
//	else
//	{
//		namedWindow("Video Capture", 1);
//		for(;;)
//		{
//			cap >> frame;
//			if(frame.empty())
//				break;
//			imshow("Video Capture", frame);
//			pMOG2->apply(frame, fgMaskMOG2);
//			imshow("Video Capture Subtracted", fgMaskMOG2);
//			if (waitKey(5) >= 0) break;				//waits 30ms for program to render next frame
//		}
//		waitKey(0);
//}
//
//
//    return 0;

}

static void onMouse( int event, int x, int y, int /*flags*/, void* /*param*/ )
{
    if( event == EVENT_LBUTTONDOWN )
    {
        point = Point2f((float)x, (float)y);
        addRemovePt = true;
    }
}


int ex3(){ VideoCapture cap;
    TermCriteria termcrit(TermCriteria::COUNT|TermCriteria::EPS,20,0.03);
    Size subPixWinSize(10,10), winSize(31,31);

    const int MAX_COUNT = 500;
    bool needToInit = false;
    bool nightMode = false;

    string input = "";

    if( input.empty() )
        cap.open(0);
    else if( input.size() == 1 && isdigit(input[0]) )
        cap.open(input[0] - '0');
    else
        cap.open(input);

    if( !cap.isOpened() )
    {
        cout << "Could not initialize capturing...\n";
        return 0;
    }

    namedWindow( "LK Demo", 1 );
    setMouseCallback( "LK Demo", onMouse, 0 );

    Mat gray, prevGray, image, frame;
    vector<Point2f> points[2];

    for(;;)
    {
        cap >> frame;
        if( frame.empty() )
            break;

        frame.copyTo(image);
        cvtColor(image, gray, COLOR_BGR2GRAY);

        if( nightMode )
            image = Scalar::all(0);

        if( needToInit )
        {
            // automatic initialization
            goodFeaturesToTrack(gray, points[1], MAX_COUNT, 0.01, 10, Mat(), 3, 0, 0.04);
            cornerSubPix(gray, points[1], subPixWinSize, Size(-1,-1), termcrit);
            addRemovePt = false;
        }
        else if( !points[0].empty() )
        {
            vector<uchar> status;
            vector<float> err;
            if(prevGray.empty())
                gray.copyTo(prevGray);
            calcOpticalFlowPyrLK(prevGray, gray, points[0], points[1], status, err, winSize,
                                 3, termcrit, 0, 0.001);
            size_t i, k;
            for( i = k = 0; i < points[1].size(); i++ )
            {
                if( addRemovePt )
                {
                    if( norm(point - points[1][i]) <= 5 )
                    {
                        addRemovePt = false;
                        continue;
                    }
                }

                if( !status[i] )
                    continue;

                points[1][k++] = points[1][i];
                circle( image, points[1][i], 3, Scalar(0,255,0), -1, 8);
            }
            points[1].resize(k);
        }

        if( addRemovePt && points[1].size() < (size_t)MAX_COUNT )
        {
            vector<Point2f> tmp;
            tmp.push_back(point);
            cornerSubPix( gray, tmp, winSize, Size(-1,-1), termcrit);
            points[1].push_back(tmp[0]);
            addRemovePt = false;
        }

        needToInit = false;
        imshow("LK Demo", image);

        char c = (char)waitKey(10);
        if( c == 27 )
            break;
        switch( c )
        {
        case 'r':
            needToInit = true;
            break;
        case 'c':
            points[0].clear();
            points[1].clear();
            break;
        case 'n':
            nightMode = !nightMode;
            break;
        }

        std::swap(points[1], points[0]);
        cv::swap(prevGray, gray);
    }

return 0;
}







